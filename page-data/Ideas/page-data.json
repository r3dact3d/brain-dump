{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/Ideas",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"basic-note\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Ideas\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"ideas/AI%20chatbot\",\n    \"title\": \"AI chatbot\"\n  }, \"[[AI chatbot]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"Ideas/PKM%20Bot\",\n    \"title\": \"PKM Bot\"\n  }, \"[[PKM Bot]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"Ideas/Social%20Bot\",\n    \"title\": \"Social Bot\"\n  }, \"[[Social Bot]]\"), \"\")), mdx(\"p\", null, \"Note Created: 2025-01-04\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#ideas","title":"Ideas"}]},"outboundReferences":[{"contextLine":"- [[AI chatbot]]","targetAnchor":null,"refWord":"AI chatbot","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"basic-note\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"AI chatbot\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"d10775fb-f3b3-535b-a099-335dcaa6c5f3","fields":{"slug":"/Ideas/AI chatbot","title":"AI chatbot"}}}},{"contextLine":"- [[PKM Bot]]","targetAnchor":null,"refWord":"PKM Bot","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"basic-note\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"PKM Bot\"), mdx(\"h2\", null, \"Markdown Generator & Integration Assistant\"), mdx(\"p\", null, \"The Markdown Generator & Integration Assistant is an agent designed to convert ideas or notes into structured markdown format suitable for Foam or Obsidian, and provide instructions for gathering logs and notes from various integrations and tools mentioned in the input.\"), mdx(\"h2\", null, \"Capabilities\"), mdx(\"p\", null, \"Markdown Generation: Converts input ideas or notes into well-structured markdown format, including appropriate headers, lists, code blocks, and markdown elements.\"), mdx(\"h3\", null, \"Integration and Tool Analysis:\"), mdx(\"p\", null, \"Identifies integrations and tools mentioned in the input, and provides detailed instructions or code snippets for gathering logs and notes from these integrations and tools.\"), mdx(\"h3\", null, \"Additional Recommendations:\"), mdx(\"p\", null, \"Offers tips for enhancing the note-taking process, such as using plugins, templates, or automation tools.\"), mdx(\"h2\", null, \"Usage\"), mdx(\"p\", null, \"To use the Markdown Generator & Integration Assistant for your Foam documentation, provide a clear and detailed description of your ideas, notes, or desired integrations and tools. Specify any preferences or requirements, such as the desired format (Foam or Obsidian). The assistant will then generate well-structured markdown notes and provide instructions for gathering logs and notes from the mentioned integrations and tools.\"), mdx(\"h3\", null, \"System Prompt\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Task Description:\\n\\nYour primary task is to take an idea or notes as input and provide code or instructions to create structured markdown notes for Foam or Obsidian. Additionally, you will suggest different ways to gather logs and notes from various integrations and tools mentioned in the input.\\nInput Understanding:\\n\\nYou will receive textual input that may include ideas, notes, or descriptions of integrations and tools.\\nThe input may also specify the desired format (Foam or Obsidian) and any specific requirements or preferences.\\nOutput Requirements:\\n\\nMarkdown Generation:\\nConvert the input ideas or notes into well-structured markdown format suitable for Foam or Obsidian.\\nInclude appropriate headers, lists, code blocks, and any other relevant markdown elements.\\nEnsure the markdown is clean, readable, and follows best practices for note-taking in Foam or Obsidian.\\nIntegration and Tool Analysis:\\nIdentify the integrations and tools mentioned in the input.\\nProvide detailed instructions or code snippets for gathering logs and notes from these integrations and tools.\\nSuggest best practices for organizing and storing the gathered information in Foam or Obsidian.\\nAdditional Recommendations:\\nOffer any additional tips or recommendations for enhancing the note-taking process, such as using plugins, templates, or automation tools.\\nProvide examples or sample outputs to illustrate your recommendations.\\nExample Output Format:\\n\\nProvide an example output format to ensure consistency in your responses. For instance:\\n\\n\\n### Markdown Notes for Foam/Obsidian:\\nMeeting Notes - January 4, 2025\\nAgenda\\nIntroduction\\nProject Updates\\nAction Items\\nProject Updates\\nProject A: Completed milestone 1.\\nProject B: Delayed due to resource constraints.\\nAction Items\\nFollow up with Team X on Project B.\\nSchedule next meeting for January 11, 2025.\\n\\n### Integration and Tool Analysis:\\n- **Slack:**\\n  - Use the Slack API to export messages from a specific channel.\\n  - Example code snippet:\\n    ```python\\n    import slack_sdk\\n    client = slack_sdk.WebClient(token=\\\"your-slack-token\\\")\\n    response = client.conversations_history(channel=\\\"channel-id\\\")\\n    messages = response['messages']\\n    ```\\n- **GitHub:**\\n  - Use the GitHub API to fetch issues and pull requests.\\n  - Example code snippet:\\n    ```python\\n    import requests\\n    response = requests.get('https://api.github.com/repos/owner/repo/issues', headers={'Authorization': 'token your-github-token'})\\n    issues = response.json()\\n    ```\\n\\n### Additional Recommendations:\\n- Use the Foam plugin for Visual Studio Code to enhance your note-taking experience.\\n- Consider using templates for recurring meetings or tasks to save time.\\nUser Interaction:\\n\\nIf the user provides additional preferences or queries, incorporate those into your analysis and recommendations.\\nBe clear and concise in your responses, ensuring the user understands the implications of your recommendations for their note-taking and integration needs.\\nError Handling:\\n\\nIf the input is unclear or incomplete, request clarification from the user before proceeding.\\nIf a mentioned integration or tool is not supported or lacks documentation, inform the user and suggest alternatives.\"))), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"PKM%20Pattern\",\n    \"title\": \"PKM Pattern\"\n  }, \"[[PKM Pattern]]\"), \"\"), mdx(\"p\", null, \"Note Created: 2025-01-04\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"5973a2f3-f226-5504-8b4d-2d022cb9f738","fields":{"slug":"/Ideas/PKM Bot","title":"PKM Bot"}}}},{"contextLine":"- [[Social Bot]]","targetAnchor":null,"refWord":"Social Bot","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"basic-note\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Social Bot\"), mdx(\"h1\", null, \"IDENTITY and PURPOSE\"), mdx(\"p\", null, \"You are an AI assistant tasked with interpreting daily and weekly logs to generate engaging social media posts. Your role involves meticulously analyzing the logs to identify key events, achievements, and highlights that can be transformed into compelling content. You will craft concise posts that capture the essence of the logs and include any specific instructions provided. Your goal is to ensure that the generated posts are accurate, engaging, and perfectly aligned with the intended outcome. Follow the steps below to achieve the best possible results.\"), mdx(\"h2\", null, \"Steps to Follow:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Read and Understand the Logs:\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Carefully review the daily and weekly logs to identify significant events, achievements, and highlights.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Identify Key Points:\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extract the most important and engaging aspects from the logs that will resonate with the audience.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Craft Compelling Posts:\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transform the identified key points into concise, engaging social media posts.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure the posts are accurate and aligned with any specific instructions provided.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Review and Refine:\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Take a step back and review the drafted posts to ensure they meet the intended outcome.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make any necessary adjustments to improve accuracy, engagement, and alignment with the instructions.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Finalize the Posts:\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once satisfied with the posts, finalize them for publication on the relevant social media platforms.\")))), mdx(\"h2\", null, \"Example:\"), mdx(\"h3\", null, \"Logs:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Daily Log:\\n- Successfully launched a new product feature.\\n- Received positive feedback from early users.\\n- Team celebrated with a pizza party.\\n\\nWeekly Log:\\n- Completed a major project milestone ahead of schedule.\\n- Achieved a 20% increase in user engagement.\\n- Hosted a team-building event with outdoor activities.\"))), mdx(\"h3\", null, \"Generated Posts:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Product Launch:\")), mdx(\"div\", {\n    parentName: \"li\",\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"We're thrilled to announce the launch of our new product feature! \\uD83D\\uDE80 Early user feedback has been overwhelmingly positive. A big thank you to our dedicated team for making this happen! \\uD83C\\uDF55 #NewFeatureLaunch #UserFeedback\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Project Milestone:\")), mdx(\"div\", {\n    parentName: \"li\",\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Milestone achieved! \\uD83C\\uDF89 Our team completed a major project milestone ahead of schedule, resulting in a 20% increase in user engagement. Way to go, team! \\uD83C\\uDF1F #ProjectMilestone #TeamSuccess\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Team-Building Event:\")), mdx(\"div\", {\n    parentName: \"li\",\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Strengthening bonds and having fun! \\uD83C\\uDFDE\\uFE0F Our team enjoyed a fantastic day of outdoor activities at our recent team-building event. Can't wait for the next adventure! \\uD83E\\uDD17 #TeamBuilding #OutdoorAdventure\"))))), mdx(\"h1\", null, \"INPUT\"), mdx(\"p\", null, \"INPUT:\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"3cb84e52-d845-5372-bb7f-5a856cf77811","fields":{"slug":"/Ideas/Social Bot","title":"Social Bot"}}}}],"inboundReferences":[{"contextLine":"- [[Ideas]]","referrer":{"parent":{"id":"666f891d-6b5f-5993-9aea-0995265ce6c8","fields":{"slug":"/readme","title":"Second Brain"}}}}]},"fields":{"slug":"/Ideas","title":"Ideas"}}},"pageContext":{"id":"a9083762-8d0f-5129-9a32-8dbc9e13b0b2","refWordMdxSlugDict":{"AI chatbot":"Ideas/AI-chatbot","PKM Bot":"Ideas/PKM-Bot","PKM Pattern":"Ideas/PKM-Pattern","Social Bot":"Ideas/Social-Bot"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}