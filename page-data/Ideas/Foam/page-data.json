{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/Ideas/Foam",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"idea-note\",\n  \"description\": \"This is my idea note template\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Foam\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Local private repository synced to local GitHub repository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exclude private/confidential notes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Notes pushed to remote public GitHub.\")), mdx(\"h2\", null, \"Backup\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Created a process called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"Automatic%20Updates\",\n    \"title\": \"Automatic Updates\"\n  }, \"[[Automatic Updates]]\"), \"\")), mdx(\"h2\", null, \"Integrations\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Generative conversations with my second brain using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../AI/RAG\",\n    \"title\": \"RAG\"\n  }, \"[[RAG]]\"), \" pipeline.\")), mdx(\"p\", null, \"Note Created: 2025-01-11\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#foam","title":"Foam","items":[{"url":"#backup","title":"Backup"},{"url":"#integrations","title":"Integrations"}]}]},"outboundReferences":[{"contextLine":"> Created a process called [[Automatic Updates]]","targetAnchor":null,"refWord":"Automatic Updates","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"idea-note\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Automatic Updates\"), mdx(\"p\", null, \"Created simple bash script called automate_git.sh\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"#!/bin/bash\\n\\n# Add all changes to the staging area\\ngit add .\\n\\n# Commit the changes with a timestamp\\ngit commit -m \\\"Automated commit: $(date)\\\"\\n\\n# Push the changes to the remote repository\\ngit push\"))), mdx(\"p\", null, \"Make script executable.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"chmod +x automate_git.sh\"))), mdx(\"p\", null, \"Setup a local cronjob\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"0 9 * * * {{working_dir}}/automate_git.sh >> {{working_dir}}/brain-dump/cron.log 2>&1\\n0 */6 * * * {{working_dir}}/automate_git.sh >> {{working_dir}}/brain-dump/cron.log 2>&1\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"[!NOTE]\", \"\\nIn the above and below examples, you will need to update the {{working_dir}} with the path to your executable and Foam/Obsidian markdown files or vault.\")), mdx(\"h2\", null, \"Repo Sync\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"30 13 * * * rsync -av --include='.foam/' --exclude='.vscode/' --exclude='private/' --exclude='Meetings/' --exclude='rsync.log' --exclude='cron.log' --exclude='_layouts/' --exclude='Journals/' --include='AI/' --include='Ansible/' --include='attachments/' --include='Demos/' --include='HAM AI/' --include='Journeys/' --include='Ideas.md' --include='Inbox.md' --include='Projects.md' --include='readme.md' --include='Todo.md' --include='Tools.md' --exclude='*' {{working_dir}}/foamy-stuff/ {{working_dir}}/brain-dump/ >> {{working_dir}}/foamy-stuff/rsync.log 2>&1\"))), mdx(\"h2\", null, \"Todo List\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"test it \")), mdx(\"p\", null, \"Note Created: 2025-01-06\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"e1b9b198-768e-5f9a-a543-3107c3e9fcbe","fields":{"slug":"/Ideas/Automatic Updates","title":"Automatic Updates"}}}},{"contextLine":"> Generative conversations with my second brain using [[RAG]] pipeline.","targetAnchor":null,"refWord":"RAG","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"ai-note\",\n  \"description\": \"This is my ai template\",\n  \"foam_template\": {\n    \"filepath\": \"AI/RAG.md\"\n  }\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"RAG\"), mdx(\"h2\", null, \"Patterns\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"../attachments/RAG%20Pipeline.jpg\",\n    \"alt\": \"RAG Pattern\"\n  })), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/r3dact3d/RAG-Pipeline\"\n  }, \"RAG Pipeline\")), mdx(\"li\", {\n    parentName: \"ul\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"10e74203-194e-50d7-a685-116d3a0d963d","fields":{"slug":"/AI/RAG","title":"RAG"}}}}],"inboundReferences":[{"contextLine":"4. Create [[Foam]] document","referrer":{"parent":{"id":"0a56c4d4-e7bc-51f8-b2c2-17cf0f1a3a54","fields":{"slug":"/Todo","title":"Todo"}}}},{"contextLine":"> To see how I setup my Second Brain, it all starts with [[Foam]]","referrer":{"parent":{"id":"666f891d-6b5f-5993-9aea-0995265ce6c8","fields":{"slug":"/readme","title":"Second Brain"}}}}]},"fields":{"slug":"/Ideas/Foam","title":"Foam"}}},"pageContext":{"id":"c003ada4-8ef1-5bb0-847c-382d0e71f925","refWordMdxSlugDict":{"Automatic Updates":"Ideas/Automatic-Updates","RAG":"AI/RAG"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}