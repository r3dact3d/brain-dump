{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/Ideas/Foam",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"idea-note\",\n  \"description\": \"This is my idea note template\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Foam\"), mdx(\"p\", null, \"As part of my work and due partly to my personality, I do a lot of discovery and research through out the day.  I was looking for a way to take better notes to reflect on and eventually integrate into my AI \", \"[RAG]\", \" pipeline so that I can have generative conversations with my notes.  \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I won't go into detail about all the options I considered, but I decided to use Foam for my new \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../readme.md\"\n  }, \"Second Brain\"), \" for the following reasons.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It uses the markdown format, so easy to use and readme.md\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Opensource and east to start using \", \"[Foam]\", \" in vs code with just a few extensions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I can keep my files complete private and local if I want\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I can sync with GitHub between devices.\")), mdx(\"h2\", null, \"Templates\"), mdx(\"h2\", null, \"Syncing\"), mdx(\"p\", null, \"In my notes I have notes that I want to share with the public for collaboration, however there are also some notes that are private or confidential that I don't want to expose to the public.\"), mdx(\"h2\", null, \"Backup\"), mdx(\"p\", null, \"Created a process to sync my \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Private\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Public\"), \" notes called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"Automatic%20Updates\",\n    \"title\": \"Automatic Updates\"\n  }, \"[[Automatic Updates]]\"), \"\"), mdx(\"p\", null, \"Note Created: 2025-01-11\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#foam","title":"Foam","items":[{"url":"#templates","title":"Templates"},{"url":"#syncing","title":"Syncing"},{"url":"#backup","title":"Backup"}]}]},"outboundReferences":[{"contextLine":"Created a process to sync my **Private** and **Public** notes called [[Automatic Updates]]","targetAnchor":null,"refWord":"Automatic Updates","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"idea-note\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Automatic Updates\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Here is my pipeline to share the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public\"), \" facing part of my \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Second-Brain\",\n    \"title\": \"Second Brain\"\n  }, \"[[Second Brain]]\"), \" and keep the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"private\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"internal ruminations\"), \" to myself.\")), mdx(\"p\", null, \"The idea here is to seperate public facing notes from my private notes and share them publicly for easy access and collaboration using these tools:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rsync\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"git\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"crontab\")), mdx(\"p\", null, \"These are the specific steps currently documented that create the automatic backup pipeline:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write notes using VS Code, using Foam extensions.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The markdown files are saved in a local private github repo\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rsync\"), \" files designated as public to local public github repo\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"git\"), \" local public repo to remote public repo\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Wrap these up in a bash script and put in \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"crontab\"), \" to run as scheduled\")), mdx(\"h2\", null, \"rsync\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I use this to sync public facing stuff to another local git repo to sync with a public source.\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"sync -av --exclude='.foam/' --exclude='.git/' --exclude='.vscode/' --exclude='scripts/' --exclude='Companies/' --exclude='private/' --exclude='Meetings/' --exclude='rsync.log' --exclude='cron.log' --exclude='_layouts/' --exclude='Journals/' --include='AI/' --include='Ansible/' --include='attachments/' --include='Demos/' --include='HAM AI/' --include='Journeys/' -- include='Ideas/' --include='Fabric/' --include='Ideas.md' --include='Inbox.md' --include='Projects.md' --include='readme.md' --include='Todo.md' --include='Tools.md' --exclude='*' {{working_dir}}/foamy-stuff/ {{working_dir}}/brain-dump/ >> {{working_dir}}/foamy-stuff/rsync.log 2>&1\"))), mdx(\"h2\", null, \"git\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Created simple bash script called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"automate_git.sh\"), \" that contains just a few git commands to commit and sync the local repository to the remote public facing repo.\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"#!/bin/bash\\n\\nif ! hash rsync; then\\n    echo \\\"Rsync is not installed on this system\\\"\\n    exit 1\\nfi\\n\\nrsync -av --include='.foam/' --exclude='.vscode/' --exclude='private/' --exclude='Meetings/' --exclude='rsync.log' --exclude='cron.log' --exclude='_layouts/' --exclude='Journals/' --include='AI/' --include='Ansible/' --include='attachments/' --include='Demos/' --include='HAM AI/' --include='Journeys/' --include='Ideas.md' --include='Inbox.md' --include='Projects.md' --include='readme.md' --include='Todo.md' --include='Tools.md' --exclude='*' {{working_dir}}foamy-stuff/ {{working_dir}}/brain-dump/\\n\\ncd {{working_dir}}/brain-dump/\\n\\nif ! hash git; then\\n    echo \\\"Git is not installed on this system\\\"\\n    exit 1\\nfi\\n\\ndiff=$(git diff)\\nif [ -z \\\"$diff\\\" ]; then\\n    echo \\\"There are no changes to commit\\\"\\n    exit 0\\nfi\\n\\nstatus=$(git status)\\nif [ -n \\\"$status\\\" ]; then\\n    echo \\\"There are changes to commit\\\"\\n    git add .\\n    git commit -m \\\"Automated commit: $(date)\\\"\\n    git push\\nfi\\n\"))), mdx(\"p\", null, \"Make script executable.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"chmod +x automate_git.sh\"))), mdx(\"h2\", null, \"crontab\"), mdx(\"p\", null, \"Setup a local crontab to run when my laptop is most likely to be on\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"30 13 * * *  {{working_dir}}/brain-dump/automate_git.sh >> {{working_dir}}/foamy-stuff/cron.log 2>&1\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"[!NOTE]\", \"\\nIn the above and below examples, you will need to update the {{working_dir}} with the path to your executable and Foam/Obsidian markdown files or vault.\")), mdx(\"p\", null, \"Note Created: 2025-01-06\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"e1b9b198-768e-5f9a-a543-3107c3e9fcbe","fields":{"slug":"/Ideas/Automatic Updates","title":"Automatic Updates"}}}}],"inboundReferences":[{"contextLine":"4. Create [[Foam]] document","referrer":{"parent":{"id":"0a56c4d4-e7bc-51f8-b2c2-17cf0f1a3a54","fields":{"slug":"/Todo","title":"Todo"}}}},{"contextLine":"> To see how I setup my Second Brain, it all starts with [[Foam]]","referrer":{"parent":{"id":"666f891d-6b5f-5993-9aea-0995265ce6c8","fields":{"slug":"/readme","title":"Second Brain"}}}}]},"fields":{"slug":"/Ideas/Foam","title":"Foam"}}},"pageContext":{"id":"c003ada4-8ef1-5bb0-847c-382d0e71f925","refWordMdxSlugDict":{"Automatic Updates":"Ideas/Automatic-Updates","Second Brain":"readme","Inbox":"Inbox","quantization":"AI/quantization","Ultimate AI Prompt":"Ideas/Ultimate-AI-Prompt","Observation Report":"Ideas/Observation-Report","ChatGPT Prompt Engineering":"Ideas/ChatGPT-Prompt-Engineering","readme":"readme","Todo":"Todo","Foam":"Ideas/Foam","Projects":"Projects","AI Journey":"Journeys/AI-Journey","Open WebUI":"AI/Open-WebUI","Fabric":"Journeys/Fabric","fabric-origin":"Fabric/fabric-origin","Home Lab":"Journeys/Home-Lab","RAG":"AI/RAG","HAM AI":"Ideas/HAM-AI","Ham Bot":"Ideas/Ham-Bot","Net Report":"HAM-AI/Net-Report","ham-resources":"HAM-AI/ham-resources","Fabric - Net Report":"HAM-AI/Fabric-Net-Report","Net Report Pattern":"HAM-AI/Net-Report-Pattern","Ansible":"Ansible/Ansible","AAP Containerized":"Ansible/AAP-Containerized","AWS_EFS_AAP":"Ansible/AWS_EFS_AAP","Ideas":"Ideas","AI chatbot":"Ideas/AI-chatbot","STT-TTS Walkthrough":"AI/STT-TTS-Walkthrough","Voice Inference":"AI/Voice-Inference","Ask R3dact3d Ansible":"Ansible/Ask-R3dact3d-Ansible","PKM Bot":"Ideas/PKM-Bot","PKM Pattern":"Ideas/PKM-Pattern","Social Bot":"Ideas/Social-Bot","Tools":"Tools"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}