{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/Todo",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"feature\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Todo\"), mdx(\"p\", null, \"The short story with Foam is I can use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Markdown\"), \" with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"VS Code\"), \" and leverage \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GitHub\"), \" to manage my personal knowledge.\"), mdx(\"h2\", null, \"What I've done\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Got it setup in Code with a couple extensions\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Wrapped my head around the layout and structure and backlinks \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Established templates for daily, meetings, ideas, journeys, and default notes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Configured \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"Ideas/Automatic%20Updates\",\n    \"title\": \"Automatic Updates\"\n  }, \"[[Automatic Updates]]\"), \" \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Configured a private repo to sync to public repo for collab and transparency \")), mdx(\"h2\", null, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Recipes\",\n    \"title\": \"Recipes\"\n  }, \"[[Recipes]]\"), \"\"), mdx(\"p\", null, \"Extensions used in VS Code\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Web Clipper\")), mdx(\"h2\", null, \"Ideas\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Import more notes and historical data\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Integrations\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Calendar\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Chatbot\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Email\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Iterate\")), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"This is an example of a todo list item that's complete\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"This one is not completed yet\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"You can mark it completed by pressing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Option\"), \"+\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"C\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Alt\"), \"+\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"C\"), \") when your cursor is on this line\", mdx(\"ul\", {\n    parentName: \"li\",\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"You can also select multiple lines and mark them all at once!\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#todo","title":"Todo","items":[{"url":"#what-ive-done","title":"What I've done"},{"url":"#recipes","title":"[Recipes]"},{"url":"#ideas","title":"Ideas"}]}]},"outboundReferences":[{"contextLine":"4. Configured [[Automatic Updates]] ","targetAnchor":null,"refWord":"Automatic Updates","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"idea-note\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Automatic Updates\"), mdx(\"p\", null, \"Created simple bash script called automate_git.sh\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"#!/bin/bash\\n\\n# Add all changes to the staging area\\ngit add .\\n\\n# Commit the changes with a timestamp\\ngit commit -m \\\"Automated commit: $(date)\\\"\\n\\n# Push the changes to the remote repository\\ngit push\"))), mdx(\"p\", null, \"Make script executable.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"chmod +x automate_git.sh\"))), mdx(\"p\", null, \"Setup a local cronjob\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"0 9 * * * {{working_dir}}/automate_git.sh >> {{working_dir}}/cron.log 2>&1\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"[!NOTE]\", \"\\nIn the above and below examples, you will need to update the {{working_dir}} with the path to your executable and Foam/Obsidian markdown files or vault.\")), mdx(\"h2\", null, \"Repo Sync\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \".bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-.bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-.bash\"\n  }, \"30 13 * * * rsync -av --exclude='.git/' --exclude='.vscode/' --exclude='_layouts/' --exclude='Journals/' {{working_dir}}/foamy-stuff/ {{working_dir}}/brain-dump/ >> {{working_dir}}/foamy-stuff/rsync.log 2>&1\"))), mdx(\"h2\", null, \"Todo List\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"test it \")), mdx(\"p\", null, \"Note Created: 2025-01-06\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"e1b9b198-768e-5f9a-a543-3107c3e9fcbe","fields":{"slug":"/Ideas/Automatic Updates","title":"Automatic Updates"}}}}],"inboundReferences":[{"contextLine":"- [[Todo]] - a place to keep track of things to do","referrer":{"parent":{"id":"666f891d-6b5f-5993-9aea-0995265ce6c8","fields":{"slug":"/readme","title":"Second Brain"}}}}]},"fields":{"slug":"/Todo","title":"Todo"}}},"pageContext":{"id":"0a56c4d4-e7bc-51f8-b2c2-17cf0f1a3a54","refWordMdxSlugDict":{"Automatic Updates":"Ideas/Automatic-Updates"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}